{
  "extends": "next/core-web-vitals",
  "rules": {
    // ğŸ‡§ğŸ‡· - Garante que o loop "for" atualize a variÃ¡vel de contagem na direÃ§Ã£o correta.
    // ğŸ‡ºğŸ‡¸ - Ensures that the "for" loop updates the counter variable in the correct direction.
    // "for-direction": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede condiÃ§Ãµes constantes, como usar `true` ou `false` diretamente em uma condiÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Prevents constant conditions, like using `true` or `false` directly in a condition.
    // "no-constant-condition": ["error", { "checkLoops": false }],
    //
    // ğŸ‡§ğŸ‡· - Impede declaraÃ§Ãµes de fluxo de controle no bloco "finally", pois isso pode causar comportamento inesperado.
    // ğŸ‡ºğŸ‡¸ - Prevents control flow statements in the "finally" block, as this can cause unexpected behavior.
    // "no-unsafe-finally": "error",
    //
    // ğŸ‡§ğŸ‡· - Desativa o uso de `alert`, `confirm`, e `prompt` no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Disables the use of `alert`, `confirm`, and `prompt` in the code.
    // "no-alert": "warn",
    //
    // ğŸ‡§ğŸ‡· - Impede mÃºltiplos espaÃ§os, exceto para indentaÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Prevents multiple spaces, except for indentation.
    // "no-multi-spaces": ["error", { "ignoreEOLComments": false }],
    //
    // ğŸ‡§ğŸ‡· - Impede a reatribuiÃ§Ã£o de parÃ¢metros de funÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Prevents reassigning function parameters.
    // "no-param-reassign": "error",
    //
    // ğŸ‡§ğŸ‡· - Exige que funÃ§Ãµes retornem sempre um valor ou nunca retornem.
    // ğŸ‡ºğŸ‡¸ - Requires functions to always or never return a value.
    // "consistent-return": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede declaraÃ§Ãµes de retorno redundantes, como `return;`.
    // ğŸ‡ºğŸ‡¸ - Prevents redundant return statements, such as `return;`.
    // "no-useless-return": "error",
    //
    // ğŸ‡§ğŸ‡· - Exige o uso de notaÃ§Ã£o "camelCase" para nomes de variÃ¡veis e funÃ§Ãµes.
    // ğŸ‡ºğŸ‡¸ - Enforces the use of camelCase notation for variable and function names.
    // "camelcase": ["error", { "properties": "never" }],
    //
    // ğŸ‡§ğŸ‡· - Garante espaÃ§amento consistente antes dos parÃªnteses de uma funÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Ensures consistent spacing before function parentheses.
    // "space-before-function-paren": ["error", "always"],
    //
    // ğŸ‡§ğŸ‡· - Desativa o uso de `eval()`, que pode ser perigoso.
    // ğŸ‡ºğŸ‡¸ - Disables the use of `eval()`, which can be dangerous.
    // "no-eval": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede atribuiÃ§Ãµes dentro de expressÃµes condicionais.
    // ğŸ‡ºğŸ‡¸ - Prevents assignments within conditional expressions.
    // "no-cond-assign": ["error", "always"],
    //
    // ğŸ‡§ğŸ‡· - Desativa o uso de `console`, exceto para `console.warn` e `console.error`.
    // ğŸ‡ºğŸ‡¸ - Disables the use of `console`, except for `console.warn` and `console.error`.
    // "no-console": ["warn", { "allow": ["warn", "error"] }],
    //
    // ğŸ‡§ğŸ‡· - Impede a modificaÃ§Ã£o de variÃ¡veis declaradas com `const`.
    // ğŸ‡ºğŸ‡¸ - Prevents modification of variables declared with `const`.
    // "no-const-assign": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de funÃ§Ãµes dentro de loops para evitar comportamento inesperado.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of functions within loops to avoid unexpected behavior.
    // "no-loop-func": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de ponto e vÃ­rgula desnecessÃ¡rio.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of unnecessary semicolons.
    // "no-extra-semi": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de variÃ¡veis nÃ£o utilizadas para manter o cÃ³digo limpo.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of unused variables to keep the code clean.
    // "no-unused-vars": [
    //   "error",
    //   { "vars": "all", "args": "after-used", "ignoreRestSiblings": true }
    // ],
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de variÃ¡veis antes de serem definidas.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of variables before they are defined.
    // "no-use-before-define": [
    //   "error",
    //   { "functions": true, "classes": true, "variables": true }
    // ],
    //
    // ğŸ‡§ğŸ‡· - Exige o uso consistente de aspas simples para strings.
    // ğŸ‡ºğŸ‡¸ - Enforces the consistent use of single quotes for strings.
    // "quotes": ["error", "single", { "avoidEscape": true }],
    //
    // ğŸ‡§ğŸ‡· - Garante indentaÃ§Ã£o consistente usando 2 espaÃ§os.
    // ğŸ‡ºğŸ‡¸ - Ensures consistent indentation using 2 spaces.
    // "indent": ["error", 2, { "SwitchCase": 1 }],
    //
    // ğŸ‡§ğŸ‡· - Garante o uso consistente de quebra de linha no estilo Unix.
    // ğŸ‡ºğŸ‡¸ - Ensures the consistent use of Unix-style line breaks.
    // "linebreak-style": ["error", "unix"],
    //
    // ğŸ‡§ğŸ‡· - Exige o uso de `===` e `!==` em vez de `==` e `!=`.
    // ğŸ‡ºğŸ‡¸ - Requires the use of `===` and `!==` instead of `==` and `!=`.
    // "eqeqeq": ["error", "always", { "null": "ignore" }],
    //
    // ğŸ‡§ğŸ‡· - Exige o uso consistente de vÃ­rgula final em literais de objetos e arrays.
    // ğŸ‡ºğŸ‡¸ - Enforces the consistent use of trailing commas in object and array literals.
    // "comma-dangle": ["error", "always-multiline"],
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de chaves duplicadas em objetos.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of duplicate keys in objects.
    // "no-dupe-keys": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a duplicaÃ§Ã£o de casos em switch statements.
    // ğŸ‡ºğŸ‡¸ - Prevents duplicate case labels in switch statements.
    // "no-duplicate-case": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a concatenaÃ§Ã£o desnecessÃ¡ria de strings.
    // ğŸ‡ºğŸ‡¸ - Prevents unnecessary concatenation of strings.
    // "no-useless-concat": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de literais octais, que podem causar confusÃ£o.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of octal literals, which can be confusing.
    // "no-octal": "error",
    //
    // ğŸ‡§ğŸ‡· - Exige ou impede espaÃ§os dentro de parÃªnteses.
    // ğŸ‡ºğŸ‡¸ - Requires or prevents spaces inside parentheses.
    // "space-in-parens": ["error", "never"],
    //
    // ğŸ‡§ğŸ‡· - Garante espaÃ§amento antes e depois de palavras-chave.
    // ğŸ‡ºğŸ‡¸ - Ensures spacing before and after keywords.
    // "keyword-spacing": ["error", { "before": true, "after": true }],
    //
    // ğŸ‡§ğŸ‡· - Limita o uso de mÃºltiplas linhas vazias no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Limits the use of multiple empty lines in the code.
    // "no-multiple-empty-lines": [
    //   "error",
    //   { "max": 1, "maxBOF": 0, "maxEOF": 1 }
    // ],
    //
    // ğŸ‡§ğŸ‡· - Desativa o uso de `with`, que pode causar confusÃ£o.
    // ğŸ‡ºğŸ‡¸ - Disables the use of `with`, which can cause confusion.
    // "no-with": "error",
    //
    // ğŸ‡§ğŸ‡· - Exige o uso consistente do modo estrito (`strict mode`).
    // ğŸ‡ºğŸ‡¸ - Enforces the consistent use of strict mode.
    // "strict": ["error", "global"],
    //
    // ğŸ‡§ğŸ‡· - Exige ou impede o uso de ponto e vÃ­rgula no final de instruÃ§Ãµes.
    // ğŸ‡ºğŸ‡¸ - Requires or prevents the use of semicolons at the end of statements.
    // "semi": ["error", "always"],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis que sombreiam variÃ¡veis externas.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables that shadow external variables.
    // "no-shadow": "error",
    //
    // ğŸ‡§ğŸ‡· - Desativa o uso de `this` fora de classes ou funÃ§Ãµes de construtor.
    // ğŸ‡ºğŸ‡¸ - Disables the use of `this` outside of classes or constructor functions.
    // "no-invalid-this": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de operadores bitwise para evitar confusÃ£o.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of bitwise operators to avoid confusion.
    // "no-bitwise": "error",
    //
    // ğŸ‡§ğŸ‡· - Exige ou impede espaÃ§os ao redor do operador de atribuiÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Requires or prevents spaces around the assignment operator.
    // "space-infix-ops": "error",
    //
    // ğŸ‡§ğŸ‡· - Garante espaÃ§amento consistente em torno de blocos.
    // ğŸ‡ºğŸ‡¸ - Ensures consistent spacing around blocks.
    // "block-spacing": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de variÃ¡veis nÃ£o declaradas.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of undeclared variables.
    // "no-undef": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a omissÃ£o de parÃªnteses em chamadas de construtor.
    // ğŸ‡ºğŸ‡¸ - Prevents omitting parentheses in constructor calls.
    // "new-parens": "error",
    //
    // ğŸ‡§ğŸ‡· - Exige a declaraÃ§Ã£o de todas as variÃ¡veis no topo de seus escopos.
    // ğŸ‡ºğŸ‡¸ - Requires all variables to be declared at the top of their scopes.
    // "vars-on-top": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de variÃ¡veis com o mesmo nome em escopos diferentes.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of variables with the same name in different scopes.
    // "no-redeclare": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a atribuiÃ§Ã£o de propriedades de objeto a si mesmas.
    // ğŸ‡ºğŸ‡¸ - Prevents assigning object properties to themselves.
    // "no-self-assign": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a comparaÃ§Ã£o de uma variÃ¡vel consigo mesma.
    // ğŸ‡ºğŸ‡¸ - Prevents comparing a variable to itself.
    // "no-self-compare": "error",
    //
    // ğŸ‡§ğŸ‡· - Desativa o uso de operadores ternÃ¡rios aninhados.
    // ğŸ‡ºğŸ‡¸ - Disables the use of nested ternary operators.
    // "no-nested-ternary": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de chamadas de funÃ§Ã£o sem parÃªnteses de invocaÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of function calls without invocation parentheses.
    // "no-unexpected-multiline": "error",
    //
    // ğŸ‡§ğŸ‡· - Garante que os blocos de cÃ³digo estejam indentados de forma consistente.
    // ğŸ‡ºğŸ‡¸ - Ensures that code blocks are consistently indented.
    // "brace-style": ["error", "1tbs", { "allowSingleLine": true }],
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia do espaÃ§amento antes e depois dos operadores de chave.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in spacing before and after key operators.
    // "key-spacing": ["error", { "beforeColon": false, "afterColon": true }],
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de `else` apÃ³s `return` em um bloco de cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of `else` after `return` in a code block.
    // "no-else-return": ["error", { "allowElseIf": false }],
    //
    // ğŸ‡§ğŸ‡· - Garante a declaraÃ§Ã£o de todos os mÃ©todos de classe.
    // ğŸ‡ºğŸ‡¸ - Ensures the declaration of all class methods.
    // "class-methods-use-this": [
    //   "error",
    //   { "exceptMethods": [], "enforceForClassFields": true }
    // ],
    //
    // ğŸ‡§ğŸ‡· - Impede a sobrescrita de variÃ¡veis nativas.
    // ğŸ‡ºğŸ‡¸ - Prevents overwriting native variables.
    // "no-native-reassign": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a redefiniÃ§Ã£o de variÃ¡veis que nÃ£o podem ser reassigned.
    // ğŸ‡ºğŸ‡¸ - Prevents redefinition of variables that cannot be reassigned.
    // "no-redeclare": ["error", { "builtinGlobals": true }],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis dentro de `case` em um switch sem usar chaves.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables inside `case` in a switch without using braces.
    // "no-case-declarations": "error",
    //
    // ğŸ‡§ğŸ‡· - Garante o uso consistente de vÃ­rgulas no final de objetos e arrays.
    // ğŸ‡ºğŸ‡¸ - Ensures consistent use of commas at the end of objects and arrays.
    // "comma-dangle": ["error", "always-multiline"],
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de vÃ­rgulas no final de uma linha.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of commas at the end of a line.
    // "no-comma-dangle": "error",
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de aspas em atributos JSX.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of quotes in JSX attributes.
    // "jsx-quotes": ["error", "prefer-double"],
    //
    // ğŸ‡§ğŸ‡· - Exige o uso de retorno em funÃ§Ãµes de ordem superior.
    // ğŸ‡ºğŸ‡¸ - Requires the use of return in higher-order functions.
    // "array-callback-return": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis que nÃ£o sÃ£o usadas no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables that are not used in the code.
    // "no-unused-vars": ["error", { "vars": "all", "args": "after-used" }],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de funÃ§Ãµes que nunca sÃ£o chamadas.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of functions that are never called.
    // "no-unused-functions": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de mÃ©todos que nunca sÃ£o chamados.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of methods that are never called.
    // "no-unused-methods": "error",
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de parÃªnteses ao chamar funÃ§Ãµes.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of parentheses when calling functions.
    // "func-call-spacing": ["error", "never"],
    //
    // ğŸ‡§ğŸ‡· - Impede a reatribuiÃ§Ã£o de parÃ¢metros de funÃ§Ã£o.
    // ğŸ‡ºğŸ‡¸ - Prevents the reassignment of function parameters.
    // "no-param-reassign": ["error", { "props": false }],
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de colchetes ao declarar arrays.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of brackets when declaring arrays.
    // "array-bracket-spacing": ["error", "never"],
    //
    // ğŸ‡§ğŸ‡· - Garante que os identificadores sejam escritos em camelCase.
    // ğŸ‡ºğŸ‡¸ - Ensures that identifiers are written in camelCase.
    // "camelcase": ["error", { "properties": "never" }],
    //
    // ğŸ‡§ğŸ‡· - Impede a criaÃ§Ã£o de variÃ¡veis que sombreiam variÃ¡veis globais.
    // ğŸ‡ºğŸ‡¸ - Prevents the creation of variables that shadow global variables.
    // "no-shadow": ["error", { "hoist": "all" }],
    //
    // ğŸ‡§ğŸ‡· - Garante que os espaÃ§os sejam consistentes em objetos.
    // ğŸ‡ºğŸ‡¸ - Ensures that spaces are consistent in objects.
    // "object-curly-spacing": ["error", "always"],
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de operadores ao longo do cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of operators throughout the code.
    // "operator-linebreak": ["error", "before"],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis com o mesmo nome em diferentes escopos.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables with the same name in different scopes.
    // "no-redeclare": ["error", { "builtinGlobals": false }],
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de chaves em blocos de cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of braces in code blocks.
    // "curly": ["error", "all"],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis que nÃ£o sÃ£o usadas no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables that are not used in the code.
    // "no-unused-vars": ["error", { "vars": "all", "args": "after-used", "ignoreRestSiblings": false }],
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de funÃ§Ãµes que nÃ£o estÃ£o definidas no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of functions that
    // "no-unused-functions": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de mÃ©todos que nÃ£o sÃ£o utilizados.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of methods that are not used.
    // "no-unused-methods": "error",
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de colchetes ao declarar arrays.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of brackets when declaring arrays.
    // "array-bracket-spacing": ["error", "never"],
    //
    // ğŸ‡§ğŸ‡· - Garante que os identificadores sejam escritos em camelCase.
    // ğŸ‡ºğŸ‡¸ - Ensures that identifiers are written in camelCase.
    // "camelcase": ["error", { "properties": "never" }],
    //
    // ğŸ‡§ğŸ‡· - Impede a criaÃ§Ã£o de variÃ¡veis que sombreiam variÃ¡veis globais.
    // ğŸ‡ºğŸ‡¸ - Prevents the creation of variables that shadow global variables.
    // "no-shadow": ["error", { "hoist": "all" }],
    //
    // ğŸ‡§ğŸ‡· - Garante que os espaÃ§os sejam consistentes em objetos.
    // ğŸ‡ºğŸ‡¸ - Ensures that spaces are consistent in objects.
    // "object-curly-spacing": ["error", "always"],
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de operadores ao longo do cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of operators throughout the code.
    // "operator-linebreak": ["error", "before"],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis com o mesmo nome em diferentes escopos.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables with the same name in different scopes.
    // "no-redeclare": ["error", { "builtinGlobals": false }],
    //
    // ğŸ‡§ğŸ‡· - Garante a consistÃªncia no uso de chaves em blocos de cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Ensures consistency in the use of braces in code blocks.
    // "curly": ["error", "all"],
    //
    // ğŸ‡§ğŸ‡· - Impede a declaraÃ§Ã£o de variÃ¡veis que nÃ£o sÃ£o usadas no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Prevents the declaration of variables that are not used in the code.
    // "no-unused-vars": ["error", { "vars": "all", "args": "after-used", "ignoreRestSiblings": false }],
    //
    // ğŸ‡§ğŸ‡· - Impede o uso de funÃ§Ãµes que nÃ£o estÃ£o definidas no cÃ³digo.
    // ğŸ‡ºğŸ‡¸ - Prevents the use of functions that are not defined in the code.
    // "no-undef": "error",
    //
    // ğŸ‡§ğŸ‡· - Impede a definiÃ§Ã£o de funÃ§Ãµes anÃ´nimas dentro de expressÃµes.
    // ğŸ‡ºğŸ‡¸ - Prevents defining anonymous functions within expressions.
    // "no-function-declaration-in-loop": "error"
  }
}
